generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Program {
  id             String                @id @default(uuid())
  name           String                @db.VarChar(100)
  programType    String                @db.VarChar(20)
  durationYears  Int
  description    String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  collaborations Collaboration[]
  eligibility    EligibilityCriteria[]
  fees           FeeStructure[]
  placements     PlacementRecord[]
  seats          ProgramSeat[]
  students       Student[]
}

model ProgramSeat {
  id            Int       @id @default(autoincrement())
  totalSeats    Int
  reservedSeats Int
  openSeats     Int
  programId     String
  program       Program   @relation(fields: [programId], references: [id])
  students      Student[]
}

model FeeStructure {
  id                     Int      @id @default(autoincrement())
  totalFee               Decimal  @db.Decimal(10, 3)
  optionalScholarshipFee Decimal? @db.Decimal(10, 3)
  scholarshipAmount      Decimal? @db.Decimal(10, 3)
  netFee                 Decimal  @db.Decimal(10, 3)
  programId              String
  program                Program  @relation(fields: [programId], references: [id])
}

model EligibilityCriteria {
  id               Int     @id @default(autoincrement())
  minQualification String  @db.VarChar(100)
  minPercentage    Decimal @db.Decimal(7, 3)
  entranceExamName String  @db.VarChar(100)
  programId        String
  program          Program @relation(fields: [programId], references: [id])
}

model Student {
  id                Int                 @id @default(autoincrement())
  fullName          String              @db.VarChar(100)
  phone             String              @db.VarChar(15)
  dob               DateTime
  gender            Gender
  address           String?
  admissionYear     Int
  admissionStatus   AdmissionStatus
  admissionNumber   String              @unique
  programId         String
  seatId            Int?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  salesId           Int?
  userLoginId       Int                 @unique
  admissionTracking AdmissionTracking[]
  program           Program             @relation(fields: [programId], references: [id])
  salesPerson       SalesPerson?        @relation(fields: [salesId], references: [id])
  seat              ProgramSeat?        @relation(fields: [seatId], references: [id])
  userLogin         UserLogin           @relation(fields: [userLoginId], references: [id], onDelete: Cascade)
}

model AdmissionTracking {
  id           Int           @id @default(autoincrement())
  stage        DocumentStage
  documentName String        @db.VarChar(50)
  remarks      String?
  updatedBy    String        @db.VarChar(100)
  updatedAt    DateTime      @default(now())
  studentId    Int
  student      Student       @relation(fields: [studentId], references: [id])
}

model SubAdmin {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  phone      String   @db.VarChar(15)
  department String?  @db.VarChar(50)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userLoginId Int     @unique
  userLogin  UserLogin @relation(fields: [userLoginId], references: [id], onDelete: Cascade)
}

model CampusActivity {
  id          Int      @id @default(autoincrement())
  eventName   String   @db.VarChar(100)
  eventType   String   @db.VarChar(50)
  startDate   DateTime
  endDate     DateTime
  organizedBy String   @db.VarChar(100)
  department  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Collaboration {
  id            Int      @id @default(autoincrement())
  industryName  String   @db.VarChar(100)
  programId     String
  companyName   String   @db.VarChar(100)
  internshipMOU String?  @db.VarChar(100)
  type          String?  @db.VarChar(50)
  yearOfSetup   Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  program       Program  @relation(fields: [programId], references: [id])
}

model PlacementRecord {
  id               Int      @id @default(autoincrement())
  programId        String
  placementYear    Int
  totalStudents    Int
  eligibleStudents Int
  studentsPlaced   Int
  highestPackage   Decimal  @db.Decimal(15, 3)
  averagePackage   Decimal  @db.Decimal(15, 3)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  program          Program  @relation(fields: [programId], references: [id])
}

model UserLogin {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student?
  subAdmin  SubAdmin?
}

model SalesPerson {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(100)
  email           String    @unique @db.VarChar(100)
  phone           String    @db.VarChar(15)
  region          String    @db.VarChar(100)
  assignedProgram String    @db.VarChar(10)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  students        Student[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AdmissionStatus {
  APPLIED
  WAITING
  REGISTERED
  SELECTED
  REJECTED
}

enum DocumentStage {
  APPLIED
  VERIFIED
  APPROVED
  REJECTED
}

enum UserRole {
  ADMIN
  SUBADMIN
  STUDENT
}
